


// Global variables

params {
  out_dir = "."	
  params.resultsDirbam2fasta = "${params.out_dir}/Results/preQC"
  params.resultsjellyfish = "${params.out_dir}/Results/preQC/kmer_analysis"
  params.resultsgenomescope = "${params.out_dir}/Results/preQC/genome_profiling"
  params.resultsassembly = "${params.out_dir}/Results/assembly"
  params.resultsQuast = "${params.out_dir}/Results/postqc/assembly_evaluation"
  params.resultsBusco = "${params.out_dir}/Results/postqc/assembly_completeness"
  params.exeReport = "${params.out_dir}/Results/exeReport"
  busco_lineage = "eukaryota"
  busco_lineage_dir = []
  enable_conda = false
	singularity_cache = null

  help = false
  dev = false
  
  adapter_filtration = false
  project_id = ""
  storage_paths = ""
  bam_folder = ""

  samtools_threads = 8
  ipa_threads = 8
  ipa_jobs = 4
  jellyfish_threads = 8

  jellyfish_mer_len = 21
  jellyfish_threads = 8
  jellyfish_hash_size = "1G"

  quast_threads = 32
  busco_threads = 32

  samtools_memory = 16.GB
  ipa_memory = 32.GB
  jellyfish_memory = 24.GB
  quast_memory = 24.GB
  busco_memory = 24.GB
  
  genomescope_threads = 1
  genomescope_memory = 24.GB
  hifi_adapter_threads = 16
  hifi_adapter_memory = 24.GB
  aws_execution_role = ""
  aws_queue = ""
  aws_region = ""
}


// profiles for processing pipeline

process{
  cpus   = 24
  memory = 24.GB
  time = 24.h 

  withName: 'assembly' {
        cpus   = params.ipa_threads * params.ipa_jobs
        memory = params.ipa_memory
        time = 24.h 
    }

  withName: 'jellyfish' {
        cpus   = params.jellyfish_threads
        memory = params.jellyfish_memory
        time = 24.h 
    }
  
  withName: 'bam2fasta' {
        cpus   = params.samtools_threads
        memory = params.samtools_memory
        time = 24.h 
    }

    withName: 'assemblies_completeness' {
        cpus   = params.busco_threads
        memory = params.busco_memory
        time = 24.h 
    }

    withName: 'evaluate_assemblies' {
        cpus   = params.quast_threads
        memory = params.quast_memory
        time = 24.h 
    }

    withName: 'genomescope' {
        cpus   = params.genomescope_threads
        memory = params.genomescope_memory
        time = 24.h 
    }

  withName: 'hifiadapterfilter' {
        cpus   = params.hifi_adapter_threads
        memory = params.hifi_adapter_memory
        time = 24.h
    }
  
  
}

profiles {
  aws {
    includeConfig './config/aws.config'
  }

	balder {
		includeConfig './config/balder.config'
	}

  docker {
    docker.enabled = true
  }
	
  singularity {
    singularity.cacheDir = params.singularity_cache
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.runOptions = " -B ./:/home/ "
  }
  
	if89 {
    singularity.cacheDir = "/g/data/if89/singularity_cache/"
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.runOptions = " -B ./:/home/ "
		includeConfig './config/if89.config'
	}

  setonix {
    includeConfig './config/setonix.config'
    singularity.cacheDir = params.singularity_cache
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.runOptions = " -B ./:/home/ "
  }

  
}


timeline {
  enabled = true
  file = "${params.exeReport}/timeline.html"
}
report {
  enabled = true
  file = "${params.exeReport}/report.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.exeReport}/trace.txt"
}
dag {
  enabled = true
  overwrite = true
  file = "${params.exeReport}/flowchart.png"
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

